@using EquinoxResourceBrowser.Dtos
@using EquinoxResourceBrowser.Interfaces

@inherits OwningComponentBase<ISearchService>

<div class="container-fluid">
    <a class="navbar-brand" href="">Resource Browser</a>
    <div>
        <RadzenLabel Text="Navigate To:" class="text-white" Component="UniverseSearchDropdown" />
        <RadzenDropDown Value=SelectedResult
                        TValue="SearchResultDto"
                        ValueChanged="SelectedResultChanged"
                        AllowClear="true"
                        AllowVirtualization="true" 
                        Name="UniverseSearchDropdown"
                        AllowFiltering="true"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterOperator="StringFilterOperator.Contains"
                        FilterDelay="50"
                        FilterPlaceholder="Search..."
                        VirtualizationOverscanCount="5"
                        Disabled="IsLoading"
                        Data=SearchResults
                        TextProperty="Name" />
    </div>
</div>

@code {
    [Parameter]
    public SearchResultDto? SelectedResult { get; set; }

    [Parameter]
    public EventCallback<SearchResultDto> SelectedResultChanged { get; set; }

    private bool IsLoading { get; set; }
    private int Count { get; set; }
    private string LastFilter { get; set; } = string.Empty;
    private IEnumerable<SearchResultDto> SearchResults { get; set; } = [];

    protected override void OnInitialized()
    {
        IsLoading = true;
        _ = Task.Run(async () =>
        {
            SearchResults = await Service.LoadUniverse();

            IsLoading = false;

            await InvokeAsync(StateHasChanged);
        });
    }
}
