@page "/"
@using EquinoxResourceBrowser.Dtos
@using EquinoxResourceBrowser.Enums
@using EquinoxResourceBrowser.Interfaces

@inject IConstellationService ConstellationService
@inject IJSRuntime JS
@inject IResourceService Resources
@inject IRegionService RegionService
@inject ISystemService SystemService
@inject IUpgradeService Upgrades

<PageTitle>Home</PageTitle>

<RadzenDataGrid IsLoading="IsLoading"
                PageSize="20"
                AllowPaging="true"
                AllowSorting="true"
                AllowFiltering="true"
                Data="Regions"
                ExpandMode="DataGridExpandMode.Single"
                ShowExpandColumn="true"
                TItem="RegionDto"
                RowExpand="@((r) => RegionRowExpand(r.Id))" class="mb-2"
                @ref=RegionGrid>
    <Template Context="region">
        <RadzenCard Style="margin-bottom:20px">
            Region:
            <b>@region.Name</b>
        </RadzenCard>
        <RadzenDataGrid IsLoading="IsConstellationLoading"
                        Data="Constellations"
                        PageSize="10"
                        AllowPaging="true"
                        AllowSorting="true"
                        AllowFiltering="true"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        ExpandMode="DataGridExpandMode.Single"
                        ShowExpandColumn="true"
                        TItem="ConstellationDto"
                        RowExpand="@((c) => ConstellationRowExpand(c.Id))"
                        @ref=ConstellationGrid>
            <Template Context="constellation">
                <RadzenCard Style="margin-bottom:20px">
                    Constellation:
                    <b>@constellation.Name</b>
                </RadzenCard>
                <RadzenDataGrid Data="Systems"
                                IsLoading="IsSystemsLoading"
                                PageSize="10"
                                AllowPaging="true"
                                AllowSorting="true"
                                AllowFiltering="true"
                                ExpandMode="DataGridExpandMode.Single"
                                ShowExpandColumn="true"
                                TItem="SystemDto"
                                RowExpand="@((s) => SystemRowExpand(s.Id))"
                                @ref=SystemGrid>
                    <Template Context="system">
                        @if(SystemResources is not null)
                        {
                            <RadzenCard Style="margin-bottom:20px">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Wrap="FlexWrap.Wrap">
                                    <img class="img-thumbnail" src="https://images.evetech.net/types/@(SystemResources.Star?.TypeId ?? 12)/icon" height="64" width="64" />
                                    <div class="align-self-center">
                                        <div>
                                            System:
                                            <b>@system.Name</b>
                                        </div>
                                        <div>
                                            Star Power: 
                                            <b>@(SystemResources.Star?.Power ?? 0) TW</b>
                                        </div>
                                    </div>
                                    @if (system.SovereignAllianceId.HasValue)
                                    {
                                        <img class="img-thumbnail" src="https://images.evetech.net/alliances/@system.SovereignAllianceId.Value/logo" height="64" width="64" />
                                        <div class="align-self-center">
                                            Owned by Alliance:
                                            <b>@system.SovereignAllianceName</b>
                                        </div>
                                    }
                                    else if (system.SovereignCorporationId.HasValue)
                                    {
                                        <img class="img-thumbnail" src="https://images.evetech.net/corporations/@system.SovereignCorporationId.Value/logo" height="64" width="64" />
                                        <div class="align-self-center">
                                            Owned by Corporation:
                                            <b>@system.SovereignCorporationName</b>
                                        </div>
                                    }
                                    else if (system.SovereignFactionId.HasValue)
                                    {
                                        <img class="img-thumbnail" src="https://images.evetech.net/alliances/@system.SovereignFactionId.Value/logo" height="64" width="64" />
                                        <div class="align-self-center">
                                            Owned by Faction:
                                            <b>@system.SovereignFactionName</b>
                                        </div>
                                    }
                                    <div class="align-self-center">
                                        Total Power:
                                        <b>@system.TotalPower.ToString("N0") TW</b>
                                    </div>
                                    <div class="align-self-center">
                                        Total Workforce:
                                        <b>@system.TotalWorkforce.ToString("N0")</b>
                                    </div>
                                </RadzenStack>
                            </RadzenCard>
                            <div class="row">
                                <div class="col-lg-8">
                                    <RadzenDataGrid Data="SystemResources.Planets"
                                                    IsLoading="IsResourcesLoading"
                                                    PageSize="10"
                                                    AllowPaging="true"
                                                    AllowSorting="true"
                                                    AllowFiltering="true"
                                                    id="planet-table">
                                        <Columns>
                                            <RadzenDataGridColumn CssClass="text-center" Width="72px">
                                                <Template Context="planet">
                                                    <img class="img-thumbnail" src="https://images.evetech.net/types/@planet.TypeId/icon" height="64" width="64" />
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn Property="Name" Title="Name" />
                                            <RadzenDataGridColumn Property="Power" Title="Power" FormatString="{0:n0} TW" />
                                            <RadzenDataGridColumn Property="Workforce" Title="Workforce" FormatString="{0:n0}" />
                                            <RadzenDataGridColumn Property="SuperionicRate" Title="Superionic Ice / Hour" FormatString="{0:n0}/hr" />
                                            <RadzenDataGridColumn Property="MagmaticRate" Title="Magmatic Gas / Hour" FormatString="{0:n0}/hr" />
                                        </Columns>
                                    </RadzenDataGrid>
                                </div>
                                <div class="col-lg-4 mt-3 mt-lg-0">
                                    <RadzenCard class="h-100">
                                        <div id="scrollable-resources" class="d-flex rz-background-color-base-200 h-100 rounded-1">
                                            <RadzenStack Orientation="Orientation.Vertical" class="w-100">
                                                <RadzenLabel class="px-2 pt-2"><b>System Upgrades</b></RadzenLabel>
                                                <RadzenFormField Text="Workforce Restriction" Variant="Variant.Outlined" class="px-2">
                                                    <RadzenRadioButtonList @bind-Value="SelectedUpgradeFilter" Disabled="IsCalculatingResources" TValue="int" Orientation=Orientation.Vertical class="my-2 ps-2">
                                                        <Items>
                                                            <RadzenRadioButtonListItem Text="All Connected Systems" Value="0" />
                                                            <RadzenRadioButtonListItem Text="Region Only" Value="1" />
                                                            <RadzenRadioButtonListItem Text="Constellation Only" Value="2" />
                                                            <RadzenRadioButtonListItem Text="System Only" Value="3" />
                                                        </Items>
                                                    </RadzenRadioButtonList>
                                                </RadzenFormField>
                                                <RadzenButton id="btn-calc" ButtonType="ButtonType.Button" class="mx-2 mb-2" Size="ButtonSize.Large" Disabled="IsCalculatingResources" Click="@(() => CalculateSystemUpgrades(system.Id))" Icon="autorenew" Text="Calculate" />
                                                @if (IsCalculatingResources)
                                                {
                                                    <RadzenProgressBarCircular class="m-auto" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                                                }
                                                else if (CalculatedResources is not null && CalculatedResources.SolarSystemId == system.Id)
                                                {
                                                    <RadzenFormField Text="Available Resources" Variant="Variant.Outlined" class="mb-2 px-2">
                                                        <RadzenStack Orientation="Orientation.Horizontal">
                                                            <div class="text-center px-3 pt-3 pb-1">
                                                                <b>Power</b>
                                                                @CalculatedResources.TotalPower.ToString("N0") TW
                                                            </div>
                                                            <div class="text-center px-3 pt-3 pb-1">
                                                                <b>Workforce</b>
                                                                @CalculatedResources.TotalWorkforce.ToString("N0")
                                                            </div>
                                                        </RadzenStack>
                                                    </RadzenFormField>
                                                    if (CalculatedResources.TotalPower > 0 || CalculatedResources.TotalWorkforce > 0 && PossibleUpgrades.Count > 0)
                                                    {
                                                        <RadzenFormField Text="Required Resources" Variant="Variant.Outlined" class="mb-2 px-2">
                                                            <RadzenStack Orientation="Orientation.Horizontal" class="text-center p-2" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                <div>
                                                                    <RadzenText TextStyle="TextStyle.Overline" class="mb-0 mt-3">Required Power</RadzenText>
                                                                    <RadzenText TextStyle="TextStyle.Body1"><b class="@GetResourceCssColor(SelectedPowerRequirement, CalculatedResources.TotalPower)">@SelectedPowerRequirement</b></RadzenText>
                                                                </div>
                                                                <div>
                                                                    <RadzenText TextStyle="TextStyle.Overline" class="mb-0">Required Workforce</RadzenText>
                                                                    <RadzenText TextStyle="TextStyle.Body1"><b class="@GetResourceCssColor(SelectedWorkforceRequirement, CalculatedResources.TotalWorkforce)">@SelectedWorkforceRequirement</b></RadzenText>
                                                                </div>
                                                                <div>
                                                                    <RadzenText TextStyle="TextStyle.Overline" class="mb-0">Ice / Hour</RadzenText>
                                                                    <RadzenText TextStyle="TextStyle.Body1"><b>@SelectedSuperionicRate</b></RadzenText>
                                                                </div>
                                                                <div>
                                                                    <RadzenText TextStyle="TextStyle.Overline" class="mb-0">Gas / Hour</RadzenText>
                                                                    <RadzenText TextStyle="TextStyle.Body1"><b>@SelectedMagmaticRate</b></RadzenText>
                                                                </div>
                                                            </RadzenStack>
                                                        </RadzenFormField>
                                                        <RadzenLabel Text="Select Upgrades" Component="UpgradeDropdown" class="px-2 mb-1" />
                                                        <RadzenDropDownDataGrid Name="UpgradeDropdown"
                                                                                FocusFilterOnPopup="true"
                                                                                Multiple="true"
                                                                                AllowClear="true"
                                                                                Placeholder="Select..."
                                                                                @bind-Value=SelectedUpgrades
                                                                                Data="PossibleUpgrades"
                                                                                TextProperty="Name"
                                                                                class="mx-2 mb-2"
                                                                                PageSize="10"
                                                                                Responsive="true"
                                                                                Chips="true"
                                                                                Style="min-height: 50px;"
                                                                                @ref=UpgradeGrid>
                                                            <Columns>
                                                                <RadzenDropDownDataGridColumn Width="40px" Sortable="false" TextAlign="TextAlign.Center" HeaderCssClass="text-center">
                                                                    <HeaderTemplate>
                                                                        <RadzenCheckBox InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select all" }})" Disabled="@(!UpgradeGrid?.AllowSelectAll ?? false)" TriState="false" TValue="bool" Value="@(PossibleUpgrades.Any(c => SelectedUpgrades != null && SelectedUpgrades.Contains(c)))"
                                                                                        Change="@(args => SelectedUpgrades = args ? UpgradeGrid.View.Cast<UpgradeDto>() : SelectedUpgrades = Enumerable.Empty<UpgradeDto>())" />
                                                                    </HeaderTemplate>
                                                                    <Template Context="data">
                                                                        <RadzenCheckBox InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select item" }})" TriState="false" Value="@(SelectedUpgrades != null && SelectedUpgrades.Contains(((UpgradeDto) data)))"
                                                                                        TValue="bool" Change=@(args => UpgradeGrid.SelectItem(data)) @onclick:stopPropagation />
                                                                    </Template>
                                                                </RadzenDropDownDataGridColumn>
                                                                <RadzenDropDownDataGridColumn Property="Name" Title="Name" Width="50%" />
                                                                <RadzenDropDownDataGridColumn Property="Power" Title="Power" Width="10%" />
                                                                <RadzenDropDownDataGridColumn Property="Workforce" Title="Workforce" Width="10%" />
                                                                <RadzenDropDownDataGridColumn Property="SuperionicRate" Title="Ice" />
                                                                <RadzenDropDownDataGridColumn Property="MagmaticRate" Title="Gas" />
                                                            </Columns>
                                                        </RadzenDropDownDataGrid>
                                                    }
                                                    else
                                                    {
                                                        // No resources available (this system is shit/ls/hs/k-space/at/etc.)
                                                        <span>No resources available</span>
                                                    }
                                                }
                                            </RadzenStack>
                                        </div>
                                    </RadzenCard>
                                </div>
                            </div>
                        }
                    </Template>
                    <Columns>
                        <RadzenDataGridColumn Property="Id" Title="System ID" />
                        <RadzenDataGridColumn Property="Name" Title="System Name" />
                        <RadzenDataGridColumn Property="TotalPower" Title="Total Power" FormatString="{0:n0} TW" />
                        <RadzenDataGridColumn Property="TotalWorkforce" Title="Total Workforce" FormatString="{0:n0}" />
                        <RadzenDataGridColumn Property="SuperionicRate" Title="Total Superionic Ice / Hour" FormatString="{0:n0}/hr" />
                        <RadzenDataGridColumn Property="MagmaticRate" Title="Total Magmatic Gas / Hour" FormatString="{0:n0}/hr" />
                    </Columns>
                </RadzenDataGrid>
            </Template>
            <Columns>
                <RadzenDataGridColumn Property="Id" Title="Constellation ID" />
                <RadzenDataGridColumn Property="Name" Title="Constellation Name" />
                <RadzenDataGridColumn Property="TotalPower" Title="Total Power" FormatString="{0:n0} TW" />
                <RadzenDataGridColumn Property="TotalWorkforce" Title="Total Workforce" FormatString="{0:n0}"/>
                <RadzenDataGridColumn Property="SuperionicRate" Title="Total Superionic Ice / Hour" FormatString="{0:n0}/hr" />
                <RadzenDataGridColumn Property="MagmaticRate" Title="Total Magmatic Gas / Hour" FormatString="{0:n0}/hr" />
            </Columns>
        </RadzenDataGrid>
    </Template>
    <Columns>
        <RadzenDataGridColumn Property="Id" Title="Region ID" />
        <RadzenDataGridColumn Property="Name" SortOrder="SortOrder.Ascending" Title="Region Name" />
        <RadzenDataGridColumn Property="TotalPower" Title="Total Power" FormatString="{0:n0} TW" />
        <RadzenDataGridColumn Property="TotalWorkforce" Title="Total Workforce" FormatString="{0:n0}" />
        <RadzenDataGridColumn Property="SuperionicRate" Title="Total Superionic Ice / Hour" FormatString="{0:n0}/hr" />
        <RadzenDataGridColumn Property="MagmaticRate" Title="Total Magmatic Gas / Hour" FormatString="{0:n0}/hr" />
    </Columns>
</RadzenDataGrid>

@code{
    [CascadingParameter]
    public SearchResultDto? SearchResult { get; set; }

    private bool IsInit { get; set; }
    private bool IsLoading { get; set; }
    private bool IsConstellationLoading { get; set; }
    private bool IsSystemsLoading { get; set; }
    private bool IsResourcesLoading { get; set; }
    private bool IsCalculatingResources { get; set; }

    private int? SelectedRegionId { get; set; }
    private int? SelectedConstellationId { get; set; }
    private int? SelectedSystemId { get; set; }

    private int? PendingConstellationId { get; set; }
    private int? PendingSystemId { get; set; }

    private int SelectedUpgradeFilter { get; set; }
    private int SelectedPowerRequirement 
    {
        get 
        {
            if (SelectedUpgrades == null || !SelectedUpgrades.Any()) return default;

            return SelectedUpgrades.Sum(u => u.Power);
        }
    }
    private int SelectedWorkforceRequirement 
    {
        get 
        {
            if (SelectedUpgrades == null || !SelectedUpgrades.Any()) return default;

            return SelectedUpgrades.Sum(u => u.Workforce);
        }
    }
    private int SelectedSuperionicRate 
    {
        get 
        {
            if (SelectedUpgrades == null || !SelectedUpgrades.Any()) return default;

            return SelectedUpgrades.Sum(u => u.SuperionicRate);
        }
    }

    private int SelectedMagmaticRate 
    {
        get 
        {
            if (SelectedUpgrades == null || !SelectedUpgrades.Any()) return default;

            return SelectedUpgrades.Sum(u => u.MagmaticRate);
        }
    }

    private List<RegionDto> Regions { get; set; } = [];
    private List<ConstellationDto> Constellations { get; set; } = [];
    private List<SystemDto> Systems { get; set; } = [];
    private List<UpgradeDto> PossibleUpgrades { get; set; } = [];
    private IEnumerable<UpgradeDto> SelectedUpgrades { get; set; } = [];
    private ResourceDto? SystemResources { get; set; }
    private CalculatedResourceDto? CalculatedResources { get; set; }

    private RadzenDropDownDataGrid<IEnumerable<UpgradeDto>>? UpgradeGrid { get; set; }
    private RadzenDataGrid<RegionDto>? RegionGrid { get; set; }
    private RadzenDataGrid<ConstellationDto>? ConstellationGrid { get; set; }
    private RadzenDataGrid<SystemDto>? SystemGrid { get; set; }

    protected override void OnInitialized()
    {
        IsLoading = true;

        _ = Task.Run(async () =>
        {
            Regions = await RegionService.GetAllRegions();
            PossibleUpgrades = await Upgrades.GetUpgrades();
            
            IsLoading = false;
            IsInit = true;

            await InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsInit && SearchResult != null && SearchResult.Type != SearchResultType.None) await NavigateToSearchResult(SearchResult);
    }

    private void RegionRowExpand(int regionId)
    {
        IsConstellationLoading = true;
        SelectedRegionId = regionId;

        _ = Task.Run(async () =>
        {
            Constellations = await ConstellationService.GetConstellationsForRegion(regionId);
            if (PendingConstellationId is not null && PendingConstellationId > 0)
            {
                await FindAndExpandConstellation(PendingConstellationId.Value);
            }
            IsConstellationLoading = false;

            await InvokeAsync(StateHasChanged);
        });
    }

    private void ConstellationRowExpand(int constellationId)
    {
        IsSystemsLoading = true;
        SelectedConstellationId = constellationId;

        _ = Task.Run(async () =>
        {
            Systems = await SystemService.GetSystemsForConstellation(constellationId);
            if (PendingSystemId is not null && PendingSystemId > 0)
            {
                await FindAndExpandSystem(PendingSystemId.Value);
            }

            IsSystemsLoading = false;

            await InvokeAsync(StateHasChanged);
        });
    }

    private void SystemRowExpand(int solarSystemId)
    {
        IsResourcesLoading = true;
        SelectedSystemId = solarSystemId;

        _ = Task.Run(async () =>
        {
            try
            {
                SystemResources = await SystemService.GetResourcesForSystem(solarSystemId);
            }
            finally
            {
                IsResourcesLoading = false;
            }

            await InvokeAsync(StateHasChanged);
        });
    }

    private void CalculateSystemUpgrades(int solarSystemId)
    {
        IsCalculatingResources = true;
        _ = Task.Run(async () =>
        {
            try
            {
                await JS.InvokeVoidAsync("calculateResourceHeight");

                // TODO: Restrict them spamming the calculation when same solar system AND same filter
                // They can refresh the page if they expect sov changes...
                CalculatedResources = await Resources.CalculateAvailableResources(solarSystemId, (RestrictionFilter)SelectedUpgradeFilter);
            }
            finally
            {
                IsCalculatingResources = false;
            }

            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task NavigateToSearchResult(SearchResultDto searchResult)
    {
        var regionId = searchResult.Type == SearchResultType.Region ? searchResult.Id : searchResult.RegionId.HasValue ? searchResult.RegionId : null;
        bool regionWasExpanded = false;
        if (regionId is not null && regionId > 0)
        {
            var idx = Regions.FindIndex(r => r.Id == regionId);

            if (idx != -1 && RegionGrid is not null)
            {
                // Clear current sort and filters
                ClearSortAndFilters(RegionGrid.ColumnsCollection);

                if (idx != -1)
                {
                    var pageIndex = (int)Math.Ceiling((idx + 1) / (double)RegionGrid.PageSize);

                    if (pageIndex != (RegionGrid.CurrentPage + 1))
                    {
                        await RegionGrid.GoToPage(pageIndex - 1);
                    }

                    regionWasExpanded = RegionGrid.IsRowExpanded(Regions[idx]);
                    if (SelectedRegionId != regionId || !regionWasExpanded)
                    {
                        await RegionGrid.ExpandRow(Regions[idx]);
                    }
                }
            }
        }
        bool constellationWasExpanded = false;
        if (regionWasExpanded)
        {
            constellationWasExpanded = await FindAndExpandConstellation(searchResult);
            PendingConstellationId = null;
        }
        else
        {
            PendingConstellationId = searchResult.Type == SearchResultType.Constellation ? searchResult.Id : searchResult.ConstellationId;
        }

        bool systemWasExpanded = false;
        if (constellationWasExpanded)
        {
            systemWasExpanded = await FindAndExpandSystem(searchResult);
            PendingSystemId = null;
        }
        else if (searchResult.Type == SearchResultType.SolarSystem)
        {
            PendingSystemId = searchResult.Id;
        }
    }

    private void ClearSortAndFilters<T>(IList<RadzenDataGridColumn<T>> columns)
    {
        foreach (var column in columns)
        {
            if (column.SortOrder != null)
            {
                column.SortOrder = null;
            }

            column.ClearFilters();
        }
    }

    private async Task<bool> FindAndExpandConstellation(SearchResultDto searchResult)
    {
        bool constellationWasExpanded = false;
        var constellationId = searchResult.Type == SearchResultType.Constellation ? searchResult.Id : searchResult.ConstellationId.HasValue ? searchResult.ConstellationId : null;
        if (constellationId is not null && constellationId > 0)
        {
            var idx = Constellations.FindIndex(r => r.Id == constellationId);

            if (idx != -1 && ConstellationGrid is not null)
            {
                await InvokeAsync(async () =>
                {
                    ClearSortAndFilters(ConstellationGrid.ColumnsCollection);

                    var pageIndex = (int)Math.Ceiling((idx + 1) / (double)ConstellationGrid.PageSize);
                    if (pageIndex != (ConstellationGrid.CurrentPage + 1))
                    {
                        await ConstellationGrid.GoToPage(pageIndex - 1);
                    }

                    constellationWasExpanded = ConstellationGrid.IsRowExpanded(Constellations[idx]);
                    if (SelectedConstellationId != constellationId || !constellationWasExpanded)
                    {
                        await ConstellationGrid.ExpandRow(Constellations[idx]);
                    }
                });

            }
        }
        return constellationWasExpanded;
    }

    private async Task<bool> FindAndExpandSystem(SearchResultDto searchResult)
    {
        bool systemWasExpanded = false;

        var solarSystemId = searchResult.Type == SearchResultType.SolarSystem ? searchResult.Id : 0;
        if (solarSystemId > 0)
        {
            var idx = Systems.FindIndex(r => r.Id == solarSystemId);

            if (idx != -1 && SystemGrid is not null)
            {
                await InvokeAsync(async () =>
                {
                    ClearSortAndFilters(SystemGrid.ColumnsCollection);

                    var pageIndex = (int)Math.Ceiling((idx + 1) / (double)SystemGrid.PageSize);

                    if (pageIndex != (SystemGrid.CurrentPage + 1))
                    {
                        await SystemGrid.GoToPage(pageIndex - 1);
                    }

                    systemWasExpanded = SystemGrid.IsRowExpanded(Systems[idx]);
                    if (SelectedSystemId != solarSystemId || !systemWasExpanded)
                    {
                        await SystemGrid.ExpandRow(Systems[idx]);
                    }
                });
            }
        }
        
        return systemWasExpanded;
    }

    private async Task FindAndExpandConstellation(int constellationId)
    {
        await FindAndExpandConstellation(new SearchResultDto
        {
            Type = SearchResultType.Constellation,
            ConstellationId = constellationId,
            Id = constellationId
        });
        PendingConstellationId = null;
    }

    private async Task FindAndExpandSystem(int systemId)
    {
        await FindAndExpandSystem(new SearchResultDto
            {
                Type = SearchResultType.SolarSystem,
                Id = systemId
            });
        PendingSystemId = null;
    }

    private string GetResourceCssColor(int selected, int allowed)
    {
        if (selected > allowed) return "text-danger";
        return "";
    }
}